!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/hyeon/Desktop/PT/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220306.0/
Apply to OpenMP Library	./README.md	/^# Apply to OpenMP Library$/;"	c
Bidirectional Path Tracing	./README.md	/^# Bidirectional Path Tracing$/;"	c
CMAKE_CXX_STANDARD	./CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 20)$/;"	v
CPU -> GPU (Using OpenCL and Metal API)	./README.md	/^# CPU -> GPU (Using OpenCL and Metal API)$/;"	c
Camera	./camera.h	/^class Camera$/;"	c
Color	./color.h	/^using Color = Vec3;$/;"	t	typeref:typename:Vec3
Develop to Common Files	./README.md	/^# Develop to Common Files$/;"	c
Importance Sampling	./README.md	/^# Importance Sampling$/;"	c
Interval	./interval.h	/^    Interval() : min(+inf), max(-inf) {}$/;"	f	class:Interval
Interval	./interval.h	/^    Interval(f64 min, f64 max) : min(min), max(max) {}$/;"	f	class:Interval
Interval	./interval.h	/^class Interval$/;"	c
Metropolis Light Transport Eqaution	./README.md	/^# Metropolis Light Transport Eqaution$/;"	c
Monte Carlo Path Tracing	./README.md	/^# Monte Carlo Path Tracing$/;"	c
Mutiple Importance Sampling	./README.md	/^# Mutiple Importance Sampling$/;"	c
N	./hit_record.h	/^        Vec3 N;$/;"	m	class:hit_record	typeref:typename:Vec3
P	./hit_record.h	/^        Point3 P;$/;"	m	class:hit_record	typeref:typename:Point3
Photon Mapping	./README.md	/^# Photon Mapping$/;"	c
Point3	./vec3.h	/^using Point3 = Vec3;$/;"	t	typeref:typename:Vec3
Primitive	./primitive.h	/^class Primitive$/;"	c
Progressive Photon Mapping	./README.md	/^# Progressive Photon Mapping$/;"	c
Ray	./ray.h	/^    Ray() {}$/;"	f	class:Ray
Ray	./ray.h	/^    Ray(const Point3 &origin, const Vec3 &direction) : orig(origin), dir(direction) {}$/;"	f	class:Ray
Ray	./ray.h	/^class Ray$/;"	c
Sphere	./sphere.h	/^    Sphere(const Point3 &center, f64 radius) : center(center), radius(radius) {}$/;"	f	class:Sphere
Sphere	./sphere.h	/^class Sphere : public Primitive$/;"	c
Stochastic Photon Mapping	./README.md	/^# Stochastic Photon Mapping$/;"	c
TODO	./README.md	/^# TODO$/;"	c
Vec3	./vec3.h	/^    Vec3() : e{0, 0, 0} {}$/;"	f	class:Vec3
Vec3	./vec3.h	/^    Vec3(f64 e0, f64 e1, f64 e2) : e{e0, e1, e2} {}$/;"	f	class:Vec3
Vec3	./vec3.h	/^class Vec3$/;"	c
World	./world.h	/^    World() {}$/;"	f	class:World
World	./world.h	/^    World(std::shared_ptr<Primitive> object) { add(object); }$/;"	f	class:World
World	./world.h	/^class World : public Primitive$/;"	c
add	./world.h	/^    void add(std::shared_ptr<Primitive> object) { objects.push_back(object); }$/;"	f	class:World	typeref:typename:void
aspect_ratio	./camera.h	/^    f64 aspect_ratio = 16.0 \/ 9.0; \/\/ Ratio of image width over height$/;"	m	class:Camera	typeref:typename:f64
at	./ray.h	/^    Point3 at(f64 t) const$/;"	f	class:Ray	typeref:typename:Point3
cam_center	./camera.h	/^    Point3 cam_center = Point3(0, 0, 0);$/;"	m	class:Camera	typeref:typename:Point3
center	./sphere.h	/^    Point3 center;$/;"	m	class:Sphere	typeref:typename:Point3
clear	./world.h	/^    void clear() { objects.clear(); }$/;"	f	class:World	typeref:typename:void
contains	./interval.h	/^    bool contains(f64 x) const { return min <= x && x <= max; }$/;"	f	class:Interval	typeref:typename:bool
cross	./vec3.h	/^inline Vec3 cross(const Vec3 &u, const Vec3 &v)$/;"	f	typeref:typename:Vec3
cstr	./types.h	/^typedef const char cstr;$/;"	t	typeref:typename:const char
degrees_to_radians	./types.h	/^inline f64 degrees_to_radians(f64 degrees)$/;"	f	typeref:typename:f64
dir	./ray.h	/^    Vec3 dir;$/;"	m	class:Ray	typeref:typename:Vec3
direction	./ray.h	/^    const Vec3 &direction() const { return dir; }$/;"	f	class:Ray	typeref:typename:const Vec3 &
dot	./vec3.h	/^inline f64 dot(const Vec3 &u, const Vec3 &v)$/;"	f	typeref:typename:f64
e	./vec3.h	/^    f64 e[3];$/;"	m	class:Vec3	typeref:typename:f64[3]
empty	./interval.cpp	/^const Interval Interval::empty      = Interval(+inf, -inf);$/;"	m	class:Interval	typeref:typename:const Interval
empty	./interval.h	/^    static const Interval empty, universe;$/;"	m	class:Interval	typeref:typename:const Interval
f32	./types.h	/^typedef float f32;$/;"	t	typeref:typename:float
f64	./types.h	/^typedef double f64;$/;"	t	typeref:typename:double
front_face	./hit_record.h	/^        bool front_face;$/;"	m	class:hit_record	typeref:typename:bool
hit	./sphere.cpp	/^bool Sphere::hit(const Ray &r, Interval r_t, hit_record &rec) const $/;"	f	class:Sphere	typeref:typename:bool
hit	./world.cpp	/^bool World::hit(const Ray &r, Interval r_t, hit_record &rec) const$/;"	f	class:World	typeref:typename:bool
hit_record	./hit_record.h	/^class hit_record $/;"	c
i16	./types.h	/^typedef int16_t i16;$/;"	t	typeref:typename:int16_t
i32	./types.h	/^typedef int32_t i32;$/;"	t	typeref:typename:int32_t
i64	./types.h	/^typedef int64_t i64;$/;"	t	typeref:typename:int64_t
i8	./types.h	/^typedef int8_t i8;$/;"	t	typeref:typename:int8_t
img_h	./camera.h	/^    i32 img_h;$/;"	m	class:Camera	typeref:typename:i32
img_w	./camera.h	/^    i32 img_w = 720; \/\/ Rendered image width in pixel count $/;"	m	class:Camera	typeref:typename:i32
inf	./types.h	/^const f64 inf = std::numeric_limits<f64>::infinity();$/;"	v	typeref:typename:const f64
init	./camera.cpp	/^void Camera::init()$/;"	f	class:Camera	typeref:typename:void
length	./vec3.h	/^    f64 length() const$/;"	f	class:Vec3	typeref:typename:f64
length_squared	./vec3.h	/^    f64 length_squared() const$/;"	f	class:Vec3	typeref:typename:f64
main	./main.cpp	/^int main(int argc, const char **argv) {$/;"	f	typeref:typename:int
max	./interval.h	/^    f64 min, max;$/;"	m	class:Interval	typeref:typename:f64
min	./interval.h	/^    f64 min, max;$/;"	m	class:Interval	typeref:typename:f64
near_zero	./vec3.h	/^    bool near_zero() const$/;"	f	class:Vec3	typeref:typename:bool
objects	./world.h	/^    std::vector<std::shared_ptr<Primitive>> objects;$/;"	m	class:World	typeref:typename:std::vector<std::shared_ptr<Primitive>>
operator *	./vec3.h	/^inline Vec3 operator*(const Vec3 &u, const Vec3 &v)$/;"	f	typeref:typename:Vec3
operator *	./vec3.h	/^inline Vec3 operator*(const Vec3 &v, f64 t)$/;"	f	typeref:typename:Vec3
operator *	./vec3.h	/^inline Vec3 operator*(f64 t, const Vec3 &v)$/;"	f	typeref:typename:Vec3
operator *=	./vec3.h	/^    Vec3 &operator*=(f64 t)$/;"	f	class:Vec3	typeref:typename:Vec3 &
operator +	./vec3.h	/^inline Vec3 operator+(const Vec3 &u, const Vec3 &v)$/;"	f	typeref:typename:Vec3
operator +=	./vec3.h	/^    Vec3 &operator+=(const Vec3 &v)$/;"	f	class:Vec3	typeref:typename:Vec3 &
operator -	./vec3.h	/^    Vec3 operator-() const { return Vec3(-e[0], -e[1], -e[2]); }$/;"	f	class:Vec3	typeref:typename:Vec3
operator -	./vec3.h	/^inline Vec3 operator-(const Vec3 &u, const Vec3 &v)$/;"	f	typeref:typename:Vec3
operator /	./vec3.h	/^inline Vec3 operator\/(const Vec3 &v, f64 t)$/;"	f	typeref:typename:Vec3
operator /=	./vec3.h	/^    Vec3 &operator\/=(f64 t)$/;"	f	class:Vec3	typeref:typename:Vec3 &
operator []	./vec3.h	/^    f64 &operator[](int i) { return e[i]; }$/;"	f	class:Vec3	typeref:typename:f64 &
operator []	./vec3.h	/^    f64 operator[](int i) const { return e[i]; }$/;"	f	class:Vec3	typeref:typename:f64
orig	./ray.h	/^    Point3 orig;$/;"	m	class:Ray	typeref:typename:Point3
origin	./ray.h	/^    const Point3 &origin() const { return orig; }$/;"	f	class:Ray	typeref:typename:const Point3 &
pi	./types.h	/^const f64 pi = 3.1415926535897932385;$/;"	v	typeref:typename:const f64
pt	./CMakeLists.txt	/^project(pt)$/;"	p
px_00	./camera.h	/^    Point3 px_00;$/;"	m	class:Camera	typeref:typename:Point3
px_du	./camera.h	/^    Point3 px_du;$/;"	m	class:Camera	typeref:typename:Point3
px_dv	./camera.h	/^    Point3 px_dv;$/;"	m	class:Camera	typeref:typename:Point3
radius	./sphere.h	/^    f64 radius;$/;"	m	class:Sphere	typeref:typename:f64
random	./vec3.h	/^    static Vec3 random()$/;"	f	class:Vec3	typeref:typename:Vec3
random	./vec3.h	/^    static Vec3 random(f64 min, f64 max)$/;"	f	class:Vec3	typeref:typename:Vec3
random_in_unit_disk	./vec3.h	/^inline Vec3 random_in_unit_disk()$/;"	f	typeref:typename:Vec3
random_on_hemisphere	./vec3.h	/^inline Vec3 random_on_hemisphere(const Vec3 &normal)$/;"	f	typeref:typename:Vec3
random_unit_vector	./vec3.h	/^inline Vec3 random_unit_vector()$/;"	f	typeref:typename:Vec3
random_value	./types.h	/^inline f64 random_value()$/;"	f	typeref:typename:f64
random_value	./types.h	/^inline f64 random_value(f64 min, f64 max)$/;"	f	typeref:typename:f64
ray_color	./camera.cpp	/^Color Camera::ray_color(const Ray& r, const Primitive &world) const$/;"	f	class:Camera	typeref:typename:Color
reflect	./vec3.h	/^inline Vec3 reflect(const Vec3 &v, const Vec3 &n)$/;"	f	typeref:typename:Vec3
refract	./vec3.h	/^inline Vec3 refract(const Vec3 &uv, const Vec3 &n, f64 etai_over_etat)$/;"	f	typeref:typename:Vec3
render	./camera.cpp	/^void Camera::render(const Primitive &world)$/;"	f	class:Camera	typeref:typename:void
set_face_normal	./hit_record.h	/^        void set_face_normal(const Ray& r, const Vec3 &outward_normal)$/;"	f	class:hit_record	typeref:typename:void
size	./interval.h	/^    f64 size() const { return max - min; }$/;"	f	class:Interval	typeref:typename:f64
size	./types.h	/^typedef size_t size;$/;"	t	typeref:typename:size_t
str	./types.h	/^typedef std::string str;$/;"	t	typeref:typename:std::string
surrounds	./interval.h	/^    bool surrounds(f64 x) const { return min < x && x < max; }$/;"	f	class:Interval	typeref:typename:bool
t	./hit_record.h	/^        double t;$/;"	m	class:hit_record	typeref:typename:double
u16	./types.h	/^typedef uint16_t u16;$/;"	t	typeref:typename:uint16_t
u32	./types.h	/^typedef uint32_t u32;$/;"	t	typeref:typename:uint32_t
u64	./types.h	/^typedef uint64_t u64;$/;"	t	typeref:typename:uint64_t
u8	./types.h	/^typedef uint8_t u8;$/;"	t	typeref:typename:uint8_t
unit_vector	./vec3.h	/^inline Vec3 unit_vector(const Vec3 &v)$/;"	f	typeref:typename:Vec3
universe	./interval.cpp	/^const Interval Interval::universe   = Interval(-inf, +inf);$/;"	m	class:Interval	typeref:typename:const Interval
universe	./interval.h	/^    static const Interval empty, universe;$/;"	m	class:Interval	typeref:typename:const Interval
write_color	./color.cpp	/^void write_color(std::ostream &out, Color pixel_color)$/;"	f	typeref:typename:void
x	./vec3.h	/^    f64 x() const { return e[0]; }$/;"	f	class:Vec3	typeref:typename:f64
y	./vec3.h	/^    f64 y() const { return e[1]; }$/;"	f	class:Vec3	typeref:typename:f64
z	./vec3.h	/^    f64 z() const { return e[2]; }$/;"	f	class:Vec3	typeref:typename:f64
